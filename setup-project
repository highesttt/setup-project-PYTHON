#!/usr/bin/python3

#Imports
import os
from datetime import date
import time

#Get Date
today = date.today()

#Ask for Project name and binary name
csfml = input("Select Project:\n1: CSFML\n2: Basic")
name = input("Select Name of binary:")

#------------------------------ Create MakeFile ------------------------------#

#CSFML
MakeFile1:str = """##
## EPITECH PROJECT, {}
## Base MakeFile
## File description:
## Makefile
##

SRC			=	src/{}.c

OBJ			= 	$(SRC:.c=.o)

MAIN		=	main.c

MAIN_OBJ	=	$(MAIN:.c=.o)

NAME		=	{}

CPPFLAGS	=	-I ./include -W -Wall -Wextra -O2

LIBCSFML	=	-lcsfml-graphics -lcsfml-system -lcsfml-audio

all:		$(NAME)

$(NAME): $(MAIN_OBJ) $(OBJ)
	gcc -o $(NAME) $(OBJ) $(MAIN_OBJ) $(LIBCSFML) $(CPPFLAGS)

clean:
	rm -f *~
	rm -f *#
	rm -f *.o
	rm -f src/*.o
	rm -f a.out

fclean: clean
	rm -f $(NAME)

re: fclean all

run: re
	make clean
	./$(NAME)

debug: CPPFLAGS += -g
debug: re

.PHONY: all clean fclean re run debug""".format(today.year, name, name)

#Basic
MakeFile2:str = """##
## EPITECH PROJECT, {}
## Base MakeFile
## File description:
## Makefile
##

SRC			=	src/{}.c

OBJ			= 	$(SRC:.c=.o)

MAIN		=	main.c

MAIN_OBJ	=	$(MAIN:.c=.o)

NAME		=	{}

CPPFLAGS	=	-I ./include -W -Wall -Wextra -O2

all:		$(NAME)

$(NAME): $(MAIN_OBJ) $(OBJ)
	gcc -o $(NAME) $(OBJ) $(MAIN_OBJ) $(CPPFLAGS)

clean:
	rm -f *~
	rm -f *#
	rm -f *.o
	rm -f src/*.o
	rm -f a.out

fclean: clean
	rm -f $(NAME)

re: fclean all

run: re
	make clean
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo ""
	@-echo "------------------------ Running $(NAME) ------------------------"
	./$(NAME)

debug: CPPFLAGS += -g
debug: re

.PHONY: all clean fclean re run debug""".format(today.year, name, name)

#------------------------------ Create Includes ------------------------------#

#CSFML
Include1:str = """/*
** EPITECH PROJECT, {}
** Base Include
** File description:
** {}
*/

#ifndef {}_H_
    #define {}_H_

    #include <SFML/System.h>
    #include <SFML/Graphics.h>
    #include <stddef.h>
    #include <SFML/Audio.h>
    #include <unistd.h>
    #include <stdlib.h>
    #include <stdio.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>

int {}(int args, char **arg);

#endif /* !{}_H_ */""".format(today.year, name, name.upper(), name.upper(), name, name.upper())

#Basic
Include2:str = """/*
** EPITECH PROJECT, {}
** Base Include
** File description:
** {}
*/

#ifndef {}_H_
    #define {}_H_

    #include <stddef.h>
    #include <unistd.h>
    #include <stdlib.h>
    #include <stdio.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>

int {}(int args, char **arg);

#endif /* !{}_H_ */""".format(today.year, name, name.upper(), name.upper(), name, name.upper())

#------------------------------ Create GitIgnore ------------------------------#

gitignore_str:str = """{}
.vscode
*.o
*.a
.gc*""".format(name)

#------------------------------ Create Main File ------------------------------#

main_str:str = """/*
** EPITECH PROJECT, {}
** Base Main
** File description:
** {} main file
*/

#include "{}.h"

int main(int ac, char **av, char **env)
{{
    return 0;
}}
""".format(today.year, name, name)

#------------------------------ Create Project ------------------------------#

project_str:str = """/*
** EPITECH PROJECT, {}
** Base Project file
** File description:
** {} project file
*/

#include "{}.h"

int {}(int args, char **arg)
{{
    return 0;
}}
""".format(today.year, name, name, name)

#------------------------------ Create ReadMe ------------------------------#

readme_str:str = """<h1 align="center">
  <br>
  {}
  <br>
</h1>

<h4 align="center">Epitech Project PROMO 2026: {}</h4>
""".format(name, name)

#------------------------------ Create Folders ------------------------------#

os.mkdir("include")
os.mkdir("src")

#------------------------------ Create Files ------------------------------#

MakeFile = open("Makefile", "w")
Include = open("include/{}.h".format(name), "w")
Main = open("main.c".format(name), "w")
Project = open("src/{}.c".format(name), "w")
GitIgnore = open(".gitignore", "w")
Readme = open("ReadMe.md", "w")

#------------------------------ Write Files ------------------------------#

if csfml == "1":
    MakeFile.write(MakeFile1)
    Include.write(Include1)
if csfml == "2":
    MakeFile.write(MakeFile2)
    Include.write(Include2)
GitIgnore.write(gitignore_str)
Readme.write(readme_str)
Main.write(main_str)
Project.write(project_str)

#------------------------------ Push initialization ------------------------------#

time.sleep(1)

os.system("git add --all")
os.system("""git commit -m "[INIT] Initalized project" """)
os.system("git push")
